"""
Django settings for portal project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from datetime import timedelta

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'DEBUG' in os.environ

ALLOWED_HOSTS = [
    os.getenv('VIRTUAL_HOST'),
]

# For differentiating between running instances (mostly for notifications) and generating links
PROTOCOL = os.getenv('PROTOCOL', 'http')
HOSTNAME = os.getenv('VIRTUAL_HOST', '')
FRONTEND_HOSTNAME = os.getenv('FRONTEND_HOSTNAME', HOSTNAME.replace('backend.', ''))

# Needed for WeasyPrint pdf generation for loading assets from current server
BASE_URL = f'{PROTOCOL}://{HOSTNAME}'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'storages',
    'rest_auth',
    'dry_rest_permissions',
    "anymail",
    'recurrence',
    'django_crontab',
    'compressor',
    'portal',
    'status',
    'crm',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'portal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'portal',
        'USER': 'portal',
        'PASSWORD': 'Uw_rqgDgJHb0LJjVJHwcIEShqF1Ncc4K2F2mVx8c6edbJVeWjTz0vUZUSX2eXJ8e',
        'HOST': 'db',
        'PORT': 5432,
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('de', _('German')),
    ('fr', _('French')),
]

# Precedence for getting language:
# Iterable with possible string values: 'user', 'publication', 'publisher' (not yet implemented), 'request' (the Accept-Language header received from client), 'default' (LANGUAGE_CODE in settings)
# Example ('user', 'publication', 'publisher', 'request', 'default')
LANGUAGE_ORDER_OF_PRECEDENCE = ('user', 'publication', 'publisher', 'request', 'default')

# Precedence for getting timezone:
TIMEZONE_ORDER_OF_PRECEDENCE = ('user', 'publication', 'publisher', 'request', 'default')

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

FORMAT_MODULE_PATH = 'formats'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissions'
    ],
    'DEFAULT_FILTER_BACKENDS': ('portal.filters.PermissionForPublicationFilterBackend',)
}

REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": 'portal.serializers.UserSerializer',
}

EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

FIXTURE_DIRS = [
    'fixtures/'
]

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_AUTO_CREATE_BUCKET = 'AWS_AUTO_CREATE_BUCKET' in os.environ
AWS_QUERYSTRING_AUTH = 'AWS_QUERYSTRING_AUTH' in os.environ
AWS_QUERYSTRING_EXPIRE = os.getenv('AWS_QUERYSTRING_EXPIRE')
AWS_S3_ENCRYPTION = 'AWS_S3_ENCRYPTION' in os.environ
AWS_S3_FILE_OVERWRITE = 'AWS_S3_FILE_OVERWRITE' in os.environ

AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
AWS_S3_SIGNATURE_VERSION = 's3v4'

ANYMAIL = {
    "MAILGUN_API_KEY": os.getenv('MAILGUN_API_KEY', ''),
    "MAILGUN_SENDER_DOMAIN": os.getenv('MAILGUN_SENDER_DOMAIN'),
}
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', '')

MATTERMOST_WEBHOOK_URL = os.getenv('MATTERMOST_WEBHOOK_URL')
MATTERMOST_CHANNEL = os.getenv('MATTERMOST_CHANNEL')
MATTERMOST_USERNAME = os.getenv('MATTERMOST_USERNAME')

LOCALPOINT_ADDRESS = 'Dufourstrasse 90, 8008 ZÃ¼rich, Switzerland'

LOCALPOINT_PHONE = '+41 123 456 789'

LOCALPOINT_EMAIL = 'info@localpoint.ch'

# Twilio credentials from twilio.com/console
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID', '')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN', '')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER', '')

SERVICES = {
    'fusion': {
        'api_base_url': os.getenv('FUSION_API_BASE_URL'),
        'api_key': os.getenv('FUSION_API_KEY'),
    }
}

# Billing
VAT_PCT = float(os.getenv('VAT_PCT', 0.077))
INVOICES_DUE_DELTA = timedelta(days=int(os.getenv('INVOICES_DUE_DELTA', 30)))
